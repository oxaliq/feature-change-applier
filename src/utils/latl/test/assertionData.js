export const assertionData = {
  simpleComment: {
    latl: `; comment`,
    tokens: [{ type: "comment", value: "; comment" }],
    AST: {
      main: [],
    },
    code: "",
  },
  simpleSetDefinition: {
    latl: `set NASAL_PULMONIC_CONSONANTS = [ m̥, m, ɱ ]`,
    tokens: [
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "NASAL_PULMONIC_CONSONANTS" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "m̥" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "m" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɱ" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
    ],
    AST: {
      main: [
        {
          type: "set",
          setIdentifier: "NASAL_PULMONIC_CONSONANTS",
          setExpression: ["m̥", "m", "ɱ"],
        },
      ],
    },
    code: "",
  },
  commaSetDefinition: {
    latl: `
set NASAL_PULMONIC_CONSONANTS               = [ m̥, m, ɱ, n̼, n̥, n, ɳ̊, ɳ, ɲ̊, ɲ, ŋ, ̊ŋ, ɴ ],
    STOP_PULMONIC_CONSONANTS                = [ p, b, p̪, b̪, t̼, d̼, t, d, ʈ, ɖ, c, ɟ, k, ɡ, q, ɢ, ʡ, ʔ ]`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "NASAL_PULMONIC_CONSONANTS" },
      { type: "whiteSpace", value: "               " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "m̥" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "m" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɱ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "n̼" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "n̥" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "n" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɳ̊" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɳ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɲ̊" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɲ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ŋ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "̊ŋ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɴ" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "STOP_PULMONIC_CONSONANTS" },
      { type: "whiteSpace", value: "                " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "p" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "b" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "p̪" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "b̪" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "t̼" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "d̼" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "t" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "d" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ʈ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɖ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "c" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɟ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "k" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɡ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "q" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɢ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ʡ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ʔ" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
    ],
    AST: {
      main: [
        {
          type: "set",
          setIdentifier: "NASAL_PULMONIC_CONSONANTS",
          setExpression: [
            "m̥",
            "m",
            "ɱ",
            "n̼",
            "n̥",
            "n",
            "ɳ̊",
            "ɳ",
            "ɲ̊",
            "ɲ",
            "ŋ",
            "̊ŋ",
            "ɴ",
          ],
        },
        {
          type: "set",
          setIdentifier: "STOP_PULMONIC_CONSONANTS",
          setExpression: [
            "p",
            "b",
            "p̪",
            "b̪",
            "t̼",
            "d̼",
            "t",
            "d",
            "ʈ",
            "ɖ",
            "c",
            "ɟ",
            "k",
            "ɡ",
            "q",
            "ɢ",
            "ʡ",
            "ʔ",
          ],
        },
      ],
    },
  },
  setAliasDefinition: {
    latl: `
set NASAL_PULMONIC_CONSONANTS, N            = [ m̥, m, ɱ, n̼, n̥, n, ɳ̊, ɳ, ɲ̊, ɲ, ŋ, ̊ŋ, ɴ ]`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "NASAL_PULMONIC_CONSONANTS" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "N" },
      { type: "whiteSpace", value: "            " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "m̥" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "m" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɱ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "n̼" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "n̥" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "n" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɳ̊" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɳ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɲ̊" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɲ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ŋ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "̊ŋ" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "ɴ" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
    ],
    AST: {
      main: [
        {
          type: "set",
          setIdentifier: "NASAL_PULMONIC_CONSONANTS",
          setAlias: "N",
          setExpression: [
            "m̥",
            "m",
            "ɱ",
            "n̼",
            "n̥",
            "n",
            "ɳ̊",
            "ɳ",
            "ɲ̊",
            "ɲ",
            "ŋ",
            "̊ŋ",
            "ɴ",
          ],
        },
      ],
    },
  },
  setDefinitionJoin: {
    latl: `
set CLICK_CONSONANTS  = { TENUIS_CLICK_CONSONANTS or VOICED_CLICK_CONSONANTS }`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "CLICK_CONSONANTS" },
      { type: "whiteSpace", value: "  " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "TENUIS_CLICK_CONSONANTS" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetOr", value: "or" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "VOICED_CLICK_CONSONANTS" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
    ],
    AST: {
      main: [
        {
          type: "set",
          setIdentifier: "CLICK_CONSONANTS",
          setExpression: [
            {
              type: "operator",
              operator: "or",
              operands: [
                {
                  type: "identifier",
                  identifier: "TENUIS_CLICK_CONSONANTS",
                },
                {
                  type: "identifier",
                  identifier: "VOICED_CLICK_CONSONANTS",
                },
              ],
            },
          ],
        },
      ],
    },
  },
  setDefinitionMultiJoin: {
    latl: `
set CLICK_CONSONANTS  = { TENUIS_CLICK_CONSONANTS or VOICED_CLICK_CONSONANTS
                          or NASAL_CLICK_CONSONANTS or L_CLICK_CONSONANTS 
                        }`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "CLICK_CONSONANTS" },
      { type: "whiteSpace", value: "  " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "TENUIS_CLICK_CONSONANTS" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetOr", value: "or" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "VOICED_CLICK_CONSONANTS" },
      { type: "whiteSpace", value: "\n                          " },
      { type: "kwSetOr", value: "or" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "NASAL_CLICK_CONSONANTS" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetOr", value: "or" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "L_CLICK_CONSONANTS" },
      { type: "whiteSpace", value: " \n                        " },
      { type: "closeCurlyBracket", value: "}" },
    ],
    AST: {
      main: [
        {
          type: "set",
          setIdentifier: "CLICK_CONSONANTS",
          setExpression: [
            {
              type: "operator",
              operator: "or ",
              operands: [
                {
                  type: "identifier",
                  identifier: "TENUIS_CLICK_CONSONANTS",
                },
                {
                  type: "operator",
                  operator: "or",
                  operands: [
                    {
                      type: "identifier",
                      identifier: "VOICED_CLICK_CONSONANTS",
                    },
                    {
                      type: "operator",
                      operator: "or",
                      operands: [
                        {
                          type: "identifier",
                          identifier: "NASAL_CLICK_CONSONANTS",
                        },
                        {
                          type: "identifier",
                          operands: "L_CLICK_CONSONANTS",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    },
  },
  setDefinitionYield: {
    latl: `
set NASAL_VOWELS                      = { [ V ] in ORAL_VOWELS yield [ Ṽ ] },
    SHORT_NASAL_VOWELS                = { [ Vː ] in NASAL_VOWELS yield [ V ]ː },
    LONG_NASAL_VOWELS                 = { [ Vː ] in NASAL_VOWELS }`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "NASAL_VOWELS" },
      { type: "whiteSpace", value: "                      " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "V" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetIn", value: "in" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "ORAL_VOWELS" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "V" },
      { type: "phone", value: "̃" }, // test display for COMBINING TILDE OVERLAY is deceiving
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SHORT_NASAL_VOWELS" },
      { type: "whiteSpace", value: "                " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "V" },
      { type: "phone", value: "ː" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetIn", value: "in" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "NASAL_VOWELS" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "V" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "phone", value: "ː" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "LONG_NASAL_VOWELS" },
      { type: "whiteSpace", value: "                 " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "V" },
      { type: "phone", value: "ː" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetIn", value: "in" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "NASAL_VOWELS" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
    ],
  },

  setOperationsJoin: {
    latl: `
; ---- set join operations non-mutable! 
set SET_C = { SET_A not SET_B }, ;  left anti join
    SET_D = { SET_A and SET_B }, ;  inner join
    SET_E = { SET_A or SET_B },  ;  full outer join
    SET_F = { not SET_A },           ;  = { GLOBAL not SET_A }
    SET_G = { not SET_A nor SET_B } ;  = { GLOBAL not { SET_A or SET_B } }`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      { type: "comment", value: "; ---- set join operations non-mutable! " },
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "SET_C" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetNot", value: "not" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_B" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "comment", value: " ;  left anti join" },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_D" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetAnd", value: "and" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_B" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "comment", value: " ;  inner join" },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_E" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetOr", value: "or" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_B" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "comment", value: "  ;  full outer join" },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_F" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetNot", value: "not" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "comment", value: "           ;  = { GLOBAL not SET_A }" },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_G" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetNot", value: "not" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetNor", value: "nor" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_B" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "whiteSpace", value: " " },
      { type: "comment", value: ";  = { GLOBAL not { SET_A or SET_B } }" },
    ],
  },

  setOperations: {
    latl: `
; ---- set character operations - non-mutable!
set SET_B = { [ Xy ] in SET_A },    ; FILTER:       where X is any character and y is a filtering character
    SET_C = { SET_A yield [ Xy ] }, ; CONCATENATE:  performs transformation with (prepended or) appended character
    SET_D = { SET_A yield [ X concat y ] },
    SET_E = { SET_A yield [ y concat X ] },
    SET_F = { SET_A yield y[ X ] }, ; DISSOCIATE:   performs transformation removing prepended (or appended) character
    SET_G = { SET_A yield y dissoc [ X ] },
    SET_H = { SET_A yield [ X ] dissoc y },
    SET_I = { [ Xy ] in SET_A yield [ X ]y } ; combined FILTER and DISSOCIATE`,
    tokens: [
      { type: "whiteSpace", value: "\n" },
      {
        type: "comment",
        value: "; ---- set character operations - non-mutable!",
      },
      { type: "whiteSpace", value: "\n" },
      { type: "kwSet", value: "set" },
      { type: "whiteSpace", value: " " },
      { type: "setIdentifier", value: "SET_B" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetIn", value: "in" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      {
        type: "comment",
        value:
          "    ; FILTER:       where X is any character and y is a filtering character",
      },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_C" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      {
        type: "comment",
        value:
          " ; CONCATENATE:  performs transformation with (prepended or) appended character",
      },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_D" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetConcat", value: "concat" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_E" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetConcat", value: "concat" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_F" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "y" },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      {
        type: "comment",
        value:
          " ; DISSOCIATE:   performs transformation removing prepended (or appended) character",
      },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_G" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetDissoc", value: "dissoc" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_H" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetDissoc", value: "dissoc" },
      { type: "whiteSpace", value: " " },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "comma", value: "," },
      { type: "whiteSpace", value: "\n    " },
      { type: "setIdentifier", value: "SET_I" },
      { type: "whiteSpace", value: " " },
      { type: "equal", value: "=" },
      { type: "whiteSpace", value: " " },
      { type: "openCurlyBracket", value: "{" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetIn", value: "in" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "SET_A" },
      { type: "whiteSpace", value: " " },
      { type: "kwSetYield", value: "yield" },
      { type: "whiteSpace", value: " " },
      { type: "openSquareBracket", value: "[" },
      { type: "whiteSpace", value: " " },
      { type: "identifier", value: "X" },
      { type: "whiteSpace", value: " " },
      { type: "closeSquareBracket", value: "]" },
      { type: "phone", value: "y" },
      { type: "whiteSpace", value: " " },
      { type: "closeCurlyBracket", value: "}" },
      { type: "whiteSpace", value: " " },
      { type: "comment", value: "; combined FILTER and DISSOCIATE" },
    ],
  },
};
